{"version":3,"sources":["logo.svg","files/form.js","App.js","reportWebVitals.js","index.js"],"names":["Inputs","props","stateNameHandler","event","stateName","target","value","console","log","filePath","setState","weightFilePath","state","changeHandler","val","inputs","submitHandler","preventDefault","headers","Headers","append","fetch","method","body","JSON","stringify","then","res","json","result","output","parseFloat","predictedProduction","catch","error","maxTemperature","minTemperature","temperature","heatIndex","precipitaion","windSpeed","visibility","cloudCover","relativeHumidity","area","className","onSubmit","this","name","onChange","map","type","class","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.069b0fed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{Component} from 'react';\r\n\r\nclass Inputs extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tstateName:null,\r\n\t\t\tweightFilePath:null,\r\n\t\t\tinputs:{\r\n\t\t\t\tmaxTemperature:0,\r\n\t\t\t\tminTemperature:0,\r\n\t\t\t\ttemperature:0,\r\n\t\t\t\theatIndex:0,\r\n\t\t\t\tprecipitaion:0,\r\n\t\t\t\twindSpeed:0,\r\n\t\t\t\tvisibility:0,\r\n\t\t\t\tcloudCover:0,\r\n\t\t\t\trelativeHumidity:0,\r\n\t\t\t\tarea:0\r\n\t\t\t},\r\n\t\t\tpredictedProduction:0.0,\r\n\t\t};\r\n\t}\r\n\r\n\tstateNameHandler = (event) => {\r\n\t\tlet stateName=event.target.value;\r\n\t\tconsole.log(\"select = \",stateName);\r\n\t\tlet filePath='weights/';\r\n\t\tfilePath+=stateName\r\n\t\tfilePath+=\"_model.h5\";\r\n\t\tconsole.log(\"path=\",filePath)\r\n\t\tthis.setState({\r\n\t\t\tstateName:event.target.value,\r\n\t\t\tweightFilePath:filePath\r\n\t\t});\r\n\t\tconsole.log(this.state.stateName);\r\n\t\tconsole.log(this.state.filePath);\r\n\t}\r\n\r\n\tchangeHandler = (event,val) => {\r\n\t\tconsole.log(val);\r\n\t\t//console.log(event.target.value);\r\n\t\tthis.setState({\r\n\t\t\tinputs:{\r\n\t\t\t   ...this.state.inputs,[val]:event.target.value\r\n\t\t    }\r\n\t\t});\r\n\t}\r\n\r\n\tsubmitHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log('submt button clicked');\r\n\t\tconsole.log(\"in submitHandler\");\r\n\t\tconsole.log(\"props\");\r\n\t\tconsole.log(this.props);\r\n\t\tconsole.log(\"state\");\r\n\t\tconsole.log(this.state);\r\n\t\t\r\n\t\tlet headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        headers.append('Accept', 'application/json');\r\n        headers.append('Origin','https://crop-yield-prediction-4e988.web.app');\r\n\r\n        console.log(\"Ready to Send Request\");\r\n\r\n\t\tfetch('/inputData',{\r\n\t\t\tmethod: \"POST\",\r\n            headers: headers,\r\n            body: JSON.stringify(this.state),\r\n\t\t})\r\n\t\t.then(res=>res.json())\r\n\t\t.then(res=>{\r\n\t\t\tconsole.log(res);\r\n\t\t\tconsole.log(res.result);\r\n\t\t\tvar output=parseFloat(res.result);\r\n\t\t\tconsole.log(\"output = \",output);\r\n\t\t\tthis.setState({predictedProduction:output});\r\n\t\t\tconsole.log(this.state.predictedProduction);\r\n\t\t})\r\n\t\t.catch(function (error){\r\n            console.log('Request failure: ', error);\r\n         });\r\n\t};\r\n\r\n\r\n\trender(){\r\n\r\n\t\tconst states=[\r\n\t\t\t         \"Andaman and Nicobar Islands\", \"Andhra Pradesh\",\"Arunachal Pradesh\", \"Assam\", \r\n\t\t\t         \"Bihar\", \"Chandigarh\",\"Chhattisgarh\", \"Dadra and Nagar Haveli\", \"Goa\", \"Gujarat\",\r\n\t\t\t         \"Haryana\", \"Himachal Pradesh\", \"Jammu and Kashmir \", \"Jharkhand\", \"Karnataka\", \r\n\t\t\t         \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalay\", \"Mizoram\", \r\n\t\t\t         \"Nagaland\", \"Odisha\", \"Puducherry\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \r\n\t\t\t         \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\", \"Delhi\"\r\n            ];\r\n\t\t\r\n\t\treturn(\r\n\t\t\t<div className=\"form\">\r\n\t\t\t  <form onSubmit={this.submitHandler}>\r\n\t\t\t    <div>\r\n\t\t\t      <label>Select State</label>\r\n\t\t\t      <select name=\"stateName\" onChange={this.stateNameHandler}>\r\n\t\t\t         <option>Select</option>\r\n\t\t\t        {\r\n\t\t\t        \tstates.map((state) => (\r\n\t\t\t        \t\t<option value={state}>{state}</option>\r\n\t\t\t            ))\r\n\t\t\t        }\r\n\t\t\t      </select>\r\n\t\t\t    </div>\r\n\t\t\t    <div>\r\n                \t<label>Enter Max Temperature</label>\r\n                \t<input type=\"number\" name=\"maxTemperature\" onChange={(event)=>this.changeHandler(event,\"maxTemperature\")}/>\r\n                \r\n                \t<label>Enter Min Temperature</label>\r\n                \t<input type=\"number\" name=\"minTemperature\" onChange={(event)=>this.changeHandler(event,\"minTemperature\")}/>\r\n                </div>\r\n                <div>\r\n                \t<label>Enter Temperature</label>\r\n                \t<input type=\"number\" name=\"temperature\" onChange={(event)=>this.changeHandler(event,\"temperature\")}/>\r\n                \r\n                \t<label>Enter Heat Index</label>\r\n                \t<input type=\"number\" name=\"heatIndex\" onChange={(event)=>this.changeHandler(event,\"heatIndex\")}/>\r\n                </div>\r\n                <div>\r\n                \t<label>Enter Precipitaion</label>\r\n                \t<input type=\"number\" name=\"precipitaion\" onChange={(event)=>this.changeHandler(event,\"precipitaion\")}/>\r\n                </div>\r\n                <div>\r\n               \t \t<label>Enter Wind Speed</label>\r\n                \t<input type=\"number\" name=\"windSpeed\" onChange={(event)=>this.changeHandler(event,\"windSpeed\")}/>\r\n                \r\n               \t\t<label>Enter Visibility</label>\r\n                \t<input type=\"number\" name=\"visibility\" onChange={(event)=>this.changeHandler(event,\"visibility\")}/>\r\n                </div>\r\n                <div>\r\n                \t<label>Enter Cloud Cover</label>\r\n                \t<input type=\"number\" name=\"cloudCover\" onChange={(event)=>this.changeHandler(event,\"cloudCover\")}/>\r\n                \r\n                \t<label>Enter Relative Humidity</label>\r\n                \t<input type=\"number\" name=\"relativeHumidity\" onChange={(event)=>this.changeHandler(event,\"relativeHumidity\")}/>\r\n                </div>\r\n                <div>\r\n                \t<label>Enter Area of Production</label>\r\n                \t<input type=\"number\" name=\"area\" onChange={(event)=>this.changeHandler(event,\"area\")}/>\r\n                </div>\r\n                <div>\r\n                   <button class=\"sbmtbtn\">Submit</button>\r\n                </div>\r\n              </form>\r\n              <div>\r\n\t\t\t    <h2>Predicted Rice Crop Production  is : {this.state.predictedProduction}</h2>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Inputs;","import logo from './logo.svg';\nimport './App.css';\nimport Inputs from './files/form.js';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         <h1>Crop Yield Prediction</h1>\n         <Inputs />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}